version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Next.js 빌드 시 필요한 환경 변수 (예: API_BASE_URL)
      # NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api # 개발 시 직접 접근
      NEXT_PUBLIC_API_BASE_URL: /api # Nginx를 통한 프록시 사용 시
    # depends_on:
    #   - api # 개발 시에는 API 서버가 먼저 뜨도록 할 수 있음
    restart: unless-stopped

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile # ./gradlew bootJar 실행 후 사용 가능
    ports:
      - "8080:8080" # 직접 접근 포트 (Nginx 없이 테스트 시)
    environment:
      - DATABASE_URL=${DATABASE_URL} # 실제 Neon DB URL (아래 .env.example 참고)
      - JWT_SECRET=${JWT_SECRET} # 실제 JWT 시크릿
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      # OAuth2 관련 client-id, client-secret 등도 환경변수로 주입
      # - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=...
      # - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=...
    # depends_on:
    #   - db # 만약 docker-compose로 DB도 같이 띄운다면
    restart: unless-stopped
    # volumes: # 개발 중 소스코드 변경 실시간 반영 원할 시 (그러나 JAR 빌드 방식이므로 Docker 재빌드 필요)
    #   - ./backend:/app

  # db: # 로컬 PostgreSQL (Neon 대신 사용 시)
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_USER: carrydrop
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: carrydrop_dev
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80" # 외부 접속 포트
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일 마운트
    depends_on:
      - frontend
      - api
    restart: unless-stopped

# volumes: # 로컬 PostgreSQL 사용 시
#   postgres_data: 